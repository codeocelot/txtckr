<?php
date_default_timezone_set('EST'); //set to the timezone of your application
session_start(); //if no use for sessions, comment this line out
/**
 * Framework configuration - this object contains your application-specific settings
 */
class config extends configDefaults {
    /**
     * The SITE_NAME and SITE_DOMAIN constants are used in the default templates; you must set this if you will use the
     * default framework functionality such as the "default" layout or the preset email-elements.
     * You can always access these from anywhere in your application via:
     * get::$config->SITE_NAME
     * get::$config->SITE_DOMAIN
     */
    const SITE_NAME = 'txtckr';
    const SITE_DOMAIN = '127.0.0.1';

    /**
     * Database name - create new constants for additional connections (commented out example for DB_SLAVE_NAME follows)
     * Defining DB-name constants is a good practice but not required if you hard-code them in dbConnect() below
     */
    const DB_NAME = 'vork';
    //const DB_SLAVE_NAME = 'slave4readonly';

    /**
     * Most RDBMS users will only need to adjust the connection string in the first $db object. The syntax of this must
     * always match the syntax of the constructor or connect method of your relational-database PHP extension.
     *
     * For the MySQLi extension all arguments are optional and formatted as:
     * self::$db = new $db($host, $username, $passwd, $dbname, $port, $socket);
     *
     * Note: in most setups $host is either "localhost" or set to an IP address
     *       for Amazon RDS it would be something like: myinstance.crwjauxgijdf.us-east-1.rds.amazonaws.com
     *
     * For the syntax of other extensions refer to: http://www.php.net/manual/en/refs.database.vendors.php
     *
     * @param string $modelObject One of the values in self::$modelObjects determining which DB connection to establish
     */
    public function dbConnect($modelObject) {
        $db = (!DEBUG_MODE ? 'db' : 'dbDebug');
        switch ($modelObject) { //a case must exist for each value in self::$modelObjects (additional cases are benign)
            case 'db':
				/* Not needed if only using MongoDB */
                // self::$db = new $db('HOSTNAME', 'USERNAME', 'PASSWORD', self::DB_NAME);
                break;
            case 'mongo':
                if (!class_exists('vorkMongo')) {
                    require self::basepath() . 'sql' . self::DS . 'mongodb';
                }
                $m = new vorkMongo();
                self::$mongo = $m->selectDB(self::DB_NAME);
                //Upsert arg is array in newer MongoDB (leave as-is), Boolean in older- remove comments around (Boolean)
                $this->mongoUpsert = /* (Boolean) */ array('upsert' => true);
                break;
            case 'dbro':
            //if an additional connection is needed, adjust credentials below and follow the instructions in the
            //comment for $modelObjects just after this class.
				/* Not needed if only using MongoDB */
                // self::$dbro = new $db('HOSTNAME', 'USERNAME', 'PASSWORD', self::DB_SLAVE_NAME);
                break;
        }
    }

    /**
     * Using multiple database connections and/or NoSQL like MongoDB or CouchDB
     *
     * If you are only using one DB connection and it is an RDBMS (any databaes except non-relational like Mongo)
     * then you should skip this step.
     *
     * Each database connection (both RDBMS & NoSQL) needs to be defined in the $modelObjects array and have a static
     * propery existing by the same name. "db" exists by default so to add a second read-only connection you set
     * $modelObjects to array('db', 'dbro') and create a new $dbro static property (commented-out examples follow).
     *
     * Use the same process for adding a MongoDB connection in conjuction with an RDBMS (substituting in the last
     * example "mongo" for "dbro"). To use MongoDB as the sole database just overwrite $modelObjects with
     * array('mongo') - this is instead of keeping the default 'db' connection within the array. You will also want to
     * comment out the last line in this file which is RDBMS-specific: require '.config-rdbms';
     *
     * Important: each connection defined here must establish the connection within the dbConnect() method above, an
     * example for both mongo and dbro exists, for other connections just provide a unique name and access from within
     * your models by name: $this->mydbname->query(...);
     *
     * Caution: do NOT uncomment more than one of the following examples; it will trigger a PHP fatal error if you do!
     */
    //Adds MongoDB support in conjunction with other databases
    //public static $modelObjects = array('db', 'mongo'); public static $mongo;

    //Uses MongoDB as the exclusive datasource
    /* We're only using MongoDB */
	public static $modelObjects = array('mongo'); public static $mongo;

    //Adds an additional database connection called "dbro"
    //public static $modelObjects = array('db', 'dbro'); public static $dbro;

    /**
     * If true all self::$modelObjects database connections are made upon loading the first model
     * If false your connections are lazy-loaded when needed but each of your models must extend the model abstract
     * eg.: class wikiModel extends model {...}
     */
    const MODEL_AUTOCONNECT = true;

    /**
     * Enables the caching functions by initializing get::$cache with a cache object (Memcache is default, but
     * can be any object-oriented cache mechanism.)
     */
    public function cache() {
        /* // uncomment this section to enable Memcache caching (Memcache must be installed and enabled in PHP)
        if (!class_exists('memcache')) {
            return false;
        }
        get::$cache = new Memcache;
        //get::$cache->addServer('HOSTNAME', 'PORT')
        //Following is the typical setting for a single-server configuration:
        get::$cache->addServer('localhost', 11211);
        */
    }

    /**
     * Enables special AJAX handling - eg.: AJAX requests will skip the layout file and just return the view contents
     *
     * Can be set globally here and then overridden form within any controller-action or component
     *
     * Valid values:
     * (Boolean) true or false will enable or disable AJAX in all controllers
     * array('controlerName1' => true,
     *       'controlerName2' => 'actionName',
     *       'controlerName3' => array('action1', 'action2'))
     *
     * @var mixed Boolean or an array with controller-name keys & val either true, an action name or an array of actions
     */
    public $ajaxEnabled = true;

    /**
     * Execute a file that is global to the application before the page loads
     * File must be in the root of the mvc directory
     */
    const APP_CONSTRUCT = null;

    /**
     * Execute a file that is global to the application after the page loads
     * File must be in the root of the mvc directory
     */
    const APP_DESTRUCT = null;

    /**
     * Enter your ShareThis publisher code to enable the shareThis tools helper
     */
    //const SHARE_THIS = 'd123456789-1234-1234-1234-a1e123456f';


    /**
     * Enter your AddThis publisher code to enable the addThis tools helper
     */
    //const ADD_THIS = 'xa-1234567890123e';

    /**
     * Enter your Google AdSense client ID to enable use of the adSense tools helper
     */
    //const GOOGLE_AD_CLIENT = '';

    /**
     * Enter your Google Checkout credentials to enable use of the helper
     */
    /*
    public $GOOGLE_CHECKOUT = array('useSandbox' => false,
                                    'live' => array('id' => 'YOURID', 'key' => 'YOURKEY'),
                                    'sandbox' => array('id' => 'YOURID', 'key' => 'YOURKEY'));
    */

    /**
     * Enter your AuthorizeNet credentials to enable use of the chargeAuthNet method of the cc component
     */
    /*
    const AUTHNET_LOGIN = '';
    const AUTHNET_PASSWORD = '';
    */

    /**
     * Meetup API key - enables usage of the Meetup tools-helper
     */
    //const MEETUP_API_KEY = '47e794a9c4766374c761a57833a77';

    /**
     * Enter your UPS account credentials and XML Access Key (refer to ups.com for signup) to enable use of
     * the UPS functions in the shipping component
     *
     * @var array
     */
    //public $UPS = array('xmlAccessKey' => 'YOURKEY000000000', 'userid' => 'YOURID', 'password' => 'YOURPASS');

    /**
     * Enter your Amazon Web Services credentials to enable use of the amazon component
     */
    /*
    public $AMAZON = array('id' => '0000-0000-1234', 'accessKey' => 'AAAABBBBX12345CCDDDD',
                           'secretKey' => 'aA01234560bB01234560cC01234560dD');
    */

    /**
     * Enter your PayPal email to enable use of the PayPal component
     */
    //const PAYPAL_EMAIL = 'you@yourdomain.com';

    /**
     * Convenience function to determine if a user is a "superuser" (someone who gets complete access to
     * all information) and by default only used in the errorhandler view (to determine verbosity) but typical applications
     * find many uses for this
     *
     * Note, if your application uses this method to grant access to private resources then you are highly-recommended
     * to use a stronger authentication method than just checking the IP address (IPs can easily be spoofed.)
     *
     * @return boolean
     */
    public function isSuperuser() {
        return (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] == '127.0.0.1'); // <--change this before use
    }

    /**
     * Set any application-specific constants or properties after this comment.
     * examples:
     * const MY_CONSTANT = 'Hello, Shalom and Bonjour';
     * public $myProperty = array(1, 2, 3);
     *
     * Access them from any MVC element via:
     * get::$config->MY_CONSTANT
     * get::$config->myProperty
     */
	#### STRING FUNCTIONS : START #####
        /**
         * public static method
         *
         *      common_functions::normalise(param)
         *
         * @param       string
         * @return      string lowercase, spaces replaced with underscores
         * @example     "Something fishy" > "something_fishy"
         * @note
         */
        public function normalise($value){
                $value = strtolower(preg_replace('/\s/', '_', $value));
                return ($value);
        }


        /**
         * public static method
         *
         *      common_functions::safe_normalise(param)
         *
         * @param       string
         * @return      string lowercase, spaces, colons, backslashes, etc. replaced with underscores
         * @example     "http://Something\ fishy" > "http___something__fishy"
         * @note
         */
        function safe_normalise($value){
                $value = strtolower(preg_replace('/[\s\\\/;:\.]', '_', $value));
                return ($value);
        }


        /**
         * public static method
         *
         *      common_functions::unencode(param)
         *
         * @param       string  url and/or rawurlencoded
         * @return      string  string, stripped of any url encoding
         * @example     "rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Apatent" > "rft_val_fmt=info:ofi/fmt:kev:mtx:patent"
         * @note        for handling data sent in KEV format
         */
        public function unencode($value){
                $value = urldecode(rawurldecode($value));
                return ($value);
        }

        /**
         * public static method
         *
         *      common_functions::str_match(params)
         *
         * @param       string  needle
         * @param       string  haystack
         * @return      boolean true if found; false if not found
         * @example     str_match('hay', 'haystack') > true
         * @note
         */
        public function str_match($needle, $haystack){
                $result = true;
                $pos = strpos($haystack, $needle);
                        if ($pos === FALSE) { // Note the use of === strpos may also return a non-Boolean value which evaluates to FALSE
                                $result = false;
                        }
                return ($result);
        }


	#### STRING FUNCTIONS : FINISH ####

	#### NUMERIC FUNCTIONS : START ####
        /**
         * public static method
         *
         *      common_functions::make_month_num(param)
         *
         * @param       string  'mar'
         * @return      string  ('01' if not a recognisable month)
         * @example     make_month_num('mar') > '03'
         * @note        converts a PubMed/Other month format to two-digit numeric string
         */
        public function make_month_num($value){
        $num_month = "01";
        $arr = str_split($value, 3);
                        switch (strtoupper($arr[0])){
                                case "JAN":
                                        $num_month = "01";
                                        break;
                                case "FEB":
                                        $num_month = "02";
                                        break;
                                case "MAR":
                                        $num_month = "03";
                                        break;
                                case "APR":
                                        $num_month = "04";
                                        break;
                                case "MAY":
                                        $num_month = "05";
                                        break;
                                case "JUN":
                                        $num_month = "06";
                                        break;
                                case "JUL":
                                        $num_month = "07";
                                        break;
                                case "AUG":
                                        $num_month = "08";
                                        break;
                                case "SEP":
                                        $num_month = "09";
                                        break;
                                case "OCT":
                                        $num_month = "10";
                                        break;
                                case "NOV":
                                        $num_month = "11";
                                        break;
                                case "DEC":
                                        $num_month = "12";
                                        break;
                        }
        return ($num_month);
        }

        /**
         * public static method
         *
         *      common_functions::make_timestamp_openurl(param)
         *
         * @param       string/integer
         * @return      string  returns an OpenURL standard date like 2003-05-20
         * @example     make_timestamp_openur('200305201327') > '2003-05-20'
         * @note        returns an OpenURL standard date
         */
        public function make_timestamp_openurl($timestamp){
        $date = NULL;
                if ((ctype_digit($timestamp)) |(is_numeric($timestamp)) ) {
                        $arr = str_split($timestamp, 8);
                        $datearr = str_split($arr[0], 2);
                        $date = $datearr[0].$datearr[1]."-".$datearr[3]."-".$datearr[4];
                }
        return ($date);
        }

	#### NUMERIC FUNCTIONS : FINISH ####
	 
	 
    //const EXAMPLE_CONSTANT = 'your data...';
	# SERVICE TYPES SECTION -- START
		public $services = Array // indicates user preference - not implemented yet!
			(
				"fulltext",		// redirect to fulltext 
				"holdings",		// redirect to library holdings
				"request",		// if no fulltext, then auto request if user identification provided 
				"citation",		// redirect to citation with retrieval options, and RIS, etc export
				"abstract",		// as above, with abstract included (if available)
				"reference",	// redirect to enriched reference, and RIS, etc export
				"information",	// return information about the article and/or bundle
				"indexing",		// return any indexing information about the article and/or bundle
				"ranking"		// return any ranking information about the article and/or bundle
			);
	# SERVICE TYPES SECTION -- FINISH
	
	# RESPONSE TYPES SECTION -- START
		public $responses = Array // should be able to implement using Vork?
			(
				"html",	// plain HTML
				"xml",	// XML format
				"json",	// JSON format
				"txt",	// plain text
				"ris"	// export in RIS-tagged format
			);
	# RESPONSE TYPES SECTION -- FINISH	
	
	# DEFAULT CURL OPTIONS -- START	
		public $curlOpts = Array 
			(
				'CURLOPT_HEADER' => 0,
				'CURLOPT_RETURNTRANSFER' =>  1,
				'CURLOPT_FOLLOWLOCATION' =>  1,
				'CURLOPT_USERAGENT' => 'Mozilla/4.0',
				'CURLOPT_TIMEOUT' =>  '20',
				'CURLOPT_FAILONERROR' =>  1
			);
	# DEFAULT CURL OPTIONS -- FINISH

	# LINKTEMPLATES SECTION -- START
		public $linkTemplates = Array
			(
				'HANDLE' =>  Array(
				'Handle.net' => 'http://hdl.handle.net/_HANDLE_'
				),
				'OCLCNUM' =>  Array(
				'WorldCat' => 'http://www.worldcat.org/oclc/_OCLCNUM_'
				),
				'OAI' =>  Array(
				'Yahoo Search' => 'http://search.yahoo.com/search;_ylt=?p=%22_OAI_%22&y=Search&fr=sfp'
				),
				'DOI' =>  Array(
				'CrossRef' => 'http://dx.doi.org/_DOI_' // human-friendly doi
				)
			);	
	# LINKTEMPLATES SECTION -- FINISH					
	
	# DATASOURCES SECTION -- START
	
		public $DataSources = Array
			(	
				'ISBN' =>  Array(
				"oclc.json" => "http://xisbn.worldcat.org/webservices/xid/isbn/_ISBN_?method=getEditions&format=json&fl=*",
				"isbndb.xml" => "http://isbndb.com/api/books.xml?access_key=HLLBUYGA&index1=isbn&value1=_ISBN_",
				"google.json" => "http://books.google.com/books?jscmd=viewapi&bibkeys=ISBN_ISBN_",
				"openlibrary.json" => "http://openlibrary.org/api/books?bibkeys=ISBN:_ISBN_",
				"thingISBN.xml" => "http://www.librarything.com/api/thingISBN/_ISBN_&allids=1"
				),

				'ISSN' =>  Array(
				"oclc.json" => "http://xissn.worldcat.org/webservices/xid/issn/_ISSN_?method=getEditions&format=json&fl=*"
				),
			
				'DOI' =>  Array(
				"pubmed.xml" => "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&retmax=0&usehistory=y&term=_DOI_",
				"crossref.json" => "http://www.crossref.org/openurl/?id=doi:_DOI_&noredirect=true&pid=API_KEY&format=unixref",
				"nature.json" => "http://nurture.nature.com/cgi-bin/opensearch?db=crossref&out=json&q=_DOI_"
				),
				
				'PII' =>  Array(
				"pubmed.xml" => "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&retmax=0&usehistory=y&term=_PII_",
				)
			);
			
		public $onixForms = Array
			(   
				'AA' => 'Audio',
				'BA' => 'Book',
				'BB' => 'Hardcover',
				'BC' => 'Paperback',
				'DA' => 'Digital',
				'FA' => 'Film or transparency',
				'MA' => 'Microform',
				'VA' => 'Video',
				'JB' => 'Printed serial',
				'JC' => 'Electronic Serial',
				'JD' => 'Online Serial',
				'MA' => 'Microform'
			);
	# DATASOURCES SECTION -- FINISH		
	
	# RIS FORMAT TYPES SECTION -- START
	public $risTypes = Array ( // should be array_flip of $refTypes['reftype']
				'JOUR' => 'article',
				'BOOK' => 'book',
				'CHAP' => 'bookitem',
				'JFULL' => 'conference',
				'THES' => 'dissertation',
				'GEN' => 'document',
				'JFULL' => 'issue',
				'JFULL' => 'journal',
				'PAT' => 'patent',
				'JOUR' => 'preprint',
				'CONF' => 'proceeding',
				'RPRT' => 'report',
				'GEN' => 'unknown'
			);
	# RIS FORMAT TYPES SECTION -- FINISH
			
	# REFERENCE TYPES SECTION -- START
		// article		
		// book: a publication that is complete in one part or a designated finite number of parts, often identified with an ISBN.		
		// bookitem: a defined section of a book, usually with a separate title or number.		
		// conference: a record of a conference that includes one or more conference papers and that is published as an issue of a journal or serial publication 		
		// document: general document type to be used when available data elements do not allow determination of a more specific document type, i.e. when one has only author and title but no publication information. 		
		// issue: one instance of the serial publication		
		// journal: a serial publication issued in successive parts		
		// patent		
		// preprint: an individual paper or report published in paper or electronically prior to its publication in a journal or serial.		
		// proceeding: a single conference presentation published in a journal or serial publication 		
		// report: report or technical report is a published document that is issued by an organization, agency or government body		
		// thesis or dissertation		
		// unknown, but at least it's known that it's unknown!
		public $refTypes =  Array(
			'reftype' => Array (
				'article' => 'JOUR',	
				'book' => 'BOOK',	
				'bookitem' => 'CHAP',	
				'conference' => 'JFULL',	
				'dissertation' => 'THES',	
				'document' => 'GEN',	
				'issue' => 'JFULL',	
				'journal' => 'JFULL',	
				'patent' => 'PAT',	
				'preprint' => 'JOUR',	
				'proceeding' => 'CONF',	
				'report' => 'RPRT',	
				'unknown' => 'GEN'
			),		
			'key' => Array ( // seems pointless - should this be bundle instead?
				'article' => 'article',	
				'book' => 'book',	
				'bookitem' => 'bookitem',	
				'conference' => 'conference',	
				'dissertation' => 'dissertation',	
				'document' => 'document',	
				'issue' => 'issue',	
				'journal' => 'journal',	
				'patent' => 'patent',	
				'preprint' => 'report',	
				'proceeding' => 'proceeding',	
				'report' => 'report',	
				'unknown' => 'unknown'
			), 
			'notes' => Array (
				'article' => '',	
				'book' => '',	
				'bookitem' => '',	
				'conference' => 'This was identified as a "collection of conference presentations published as an issue of a serial publication" in the OpenURL metadata.',	
				'dissertation' => '',	
				'document' => 'This was identified as a "general document type" in the OpenURL metadata.',	
				'issue' => 'This was identified as a "single issue of a serial publication" in the OpenURL metadata.',	
				'journal' => 'This was identified as a "serial publication" in the OpenURL metadata.',	
				'patent' => '',	
				'preprint' => 'This was identified as an "individual paper or report published in paper or electronically prior to its publication" in a journal or serial in the OpenURL metadata.',	
				'proceeding' => 'This was identified as a "single conference presentation in a serial publication" in the OpenURL metadata.',	
				'report' => '',	
				'unknown' => 'This was identified as an "unknown format" in the OpenURL metadata.'
			), 	
			'reqtype' => Array(
				'article' => 'Journal Article',	
				'book' => 'Book',	
				'bookitem' => 'Book Section',	
				'conference' => 'Conference Item',	
				'dissertation' => 'Dissertation',	
				'document' => 'Unknown',	
				'issue' => 'Journal/Serial Issue',	
				'journal' => 'Journal/Serial Publication',	
				'patent' => 'Patent',	
				'preprint' => 'Journal Article Preprint',	
				'proceeding' => 'Conference Proceedings',	
				'report' => 'Report',	
				'unknown' => 'Unknown'
			),
			'sourcetype' => Array (
				'article' => 'Journal',	
				'book' => 'Book',	
				'bookitem' => 'Book',	
				'conference' => 'Conference',	
				'dissertation' => 'Thesis/Dissertation',	
				'document' => 'Unknown',	
				'issue' => 'Journal',	
				'journal' => 'Journal',	
				'patent' => 'Patent',	
				'preprint' => 'Journal',	
				'proceeding' => 'Conference',	
				'report' => 'Report',	
				'unknown' => 'Unknown'	
			)
		);
	# REFERENCE TYPES SECTION -- FINISH	

	# NAMES SECTION -- START		
		public $namePrefixes = Array 
			(
				 '/_van_den_/i', // van den = Dutch
				 '/_van_der_/i', // van der = Dutch
				 '/_van_de_/i', // van de = Dutch
				 '/_van_/i', // van = Dutch
				 '/_von_/i', // von = German
				 '/_dela_/i', // dela = French/Italian?
				 '/_de_la_/i', // de la = French
				 '/_de_/i', // de = Dutch/French?
				 '/_des_/i', // des = French
				 '/_di_/i', // di = Italian
				 '/_du_/i', // du = French
				 '/_af_/i', // af = Swedish
				 '/_bin_/i', // bin = Arabic
				 '/_ben_/i', // ben = Hebrew
				 '/_ibn_/i', // ibn = Arabic
				 '/_uyt_den_/i', // uyt den = Dutch
				 '/_uyt_der_/i', // uyt der = Dutch
				 '/_ten_/i', // ten = Dutch
				 '/_ter_/i', // ter = Dutch
				 '/_het_/i', // het = Dutch?
				 '/_ab_/i', // ab = Welsh
				 '/_ap_/i', // ap = Welsh
				 '/_st\._/i' // st. = English/French?
			);
			
		public $nameOthers = Array
			(
				'/^Van$/D', // Van = "West, Van", "Morrison, Van", or "Van Lustbader, Eric"?
				'/^Ben$/D' // Ben = "Ben Carey, Donald" or "Carey, Ben"?
			);
			
		public $nameTitles = Array
			(
				'/_jr[\.,]_/i', // Jr. = American
				'/_sr[\.,]_/i', // Sr. = American
				'/_[ivx]+_/i', // IV, III = English/American
				'/_ph\.?d_/i', // Doctor
				'/_m\.?d_/i', // Masters
				'/_esq[\.,]_/i', // Esquire
				'/_esquire_/i', // Esquire
				'/_judge_/i' // Esquire
			);
			
		public $nameSegments = Array
			(
				'1'	=> 'first_name',
				'2'	=> 'second_name',
				'3'	=> 'third_name'
			);
			
		public $nameInitials = Array
			(
				'1'	=> 'first_initial',
				'2'	=> 'second_initial',
				'3'	=> 'third_initial'
			);
	# NAMES SECTION -- FINISH

		
			
	# OPENURL SETTINGS MAPPING SECTION -- START
			// translate between OpenURL keys and English lowercase names (spaces substituted for underscores)
			// some of these aren't translations, they're placeholders so they're not forgotten!
		public $openurlLabels = Array
			(
				'advisor' => 'Thesis Advisor',
				'applcc' => 'Application Country',
				'appldate' => 'Application Date',
				'applnumber' => 'Application Number',
				'applyear' => 'Application Year',
				'artnum' => 'Article Number',
				'assignee' => 'Patent Assignee',
				'atitle' => 'Item Title',
				'au' => 'Author\'s name',
				'aucorp' => 'Corporate Author',
				'aufirst' => 'Author\'s first name',
				'aufull' => 'Author\'s name',
				'auinit' => 'Author\'s initials',
				'auinit1' => 'Author\'s first initial',
				'auinitm' => 'Author\'s middle initial(s)',
				'aulast' => 'Author\'s last name',
				'btitle' => 'Book Title',
				'cc' => 'Country Code',
				'co' => 'Country Name',
				'coden' => 'CODEN',
				'contributor' => 'Contributor',
				'coverage' => 'Coverage',
				'creator' => 'Creator',
				'degree' => 'Type of thesis',
				'description' => 'Description',
				'ed' => 'Editor\'s name',
				'edfirst' => 'Editor\'s first name',
				'edfull' => 'Editor\'s name',
				'edinit' => 'Editor\'s initial(s)',
				'edition' => 'Edition',
				'edlast' => 'Editor\'s last name',
				'eissn' => 'eISSN',
				'epage' => 'Last page',
				'genre' => 'Genre',
				'inst' => 'Instution',
				'inv' => 'Inventor\'s name',
				'invfirst' => 'Inventor\'s first name',
				'invfull' => 'Inventor\'s name',
				'invinit' => 'Inventor\'s initial(s)',
				'invlast' => 'Inventor\'s last name',
				'isbn' => 'ISBN',
				'issn' => 'ISSN',
				'issue' => 'Issue',
				'jtitle' => 'Journal Title',
				'kind' => 'Type of Patent',
				'pages' => 'Pages',
				'pii' => 'Publisher Item Identifier',
				'pmcid' => 'PubMed Central reference number',
				'pmid' => 'PubMed Identifier',
				'pub' => 'Publisher',
				'pubdate' => 'Published',
				'publisher' => 'Publisher',
				'quarter' => 'Quarter',
				'series' => 'Series title',
				'sid' => 'Referer Id',
				'sici' => 'Serial Item and Contribution Identifier', 
				'spage' => 'First page',
				'ssn' => 'Season',
				'stitle' => 'Abbreviated title',
				'subject' => 'Subject',
				'title' => 'Title',
				'tpages' => 'Number of pages',
				'type' => 'Type'
			);
	# OPENURL SETTINGS MAPPING SECTION -- FINISH
	
	# RIS SETTINGS MAPPING TO OPENURL SECTION -- START
		public $RIStags = Array
			(
				'A1' => 'au', // Primary author
				'A2' => 'au', // Secondary author (each name on separate line)
				'A3' => 'au', // Author Series (each name on separate line)[2]
				'AD' => 'address', # not OpenURL mapping // Address
				'AU' => 'au', //Author (syntax. Last name, First name, Suffix)
				'AV' => 'availability', # not supported // Availability
				'BT' => 'btitle', // Book title
				'CP' => 'issue', // Issue number[6]
				'EP' => 'ed', // Author Secondary/Editor[3]
				'EP' => 'epage', // Ending page number
				'ER' => 'null', // End of Reference (must be the last tag)
				'ID' => 'id', // Reference ID (not imported to reference software)
				'IS' => 'issue', // Issue number
				'J1' => 'stitle', // Periodical name - User abbreviation 1
				'J2' => 'stitle', // Periodical name - User abbreviation 2
				'JA' => 'jtitle', // Periodical in which article was published			
				'JF' => 'jtitle', // Periodical full name
				'JO' => 'stitle', // Periodical standard abbreviation
				'KW' => 'subject', // Keywords (each keyword must be on separate line preceded KW -)
				'L1' => 'pdf',  # not OpenURL mapping // Link to PDF
				'L2' => 'fulltext', # not OpenURL mapping // Link to Full-text
				'L3' => 'id', // Related records
				'L4' => 'images', # not OpenURL mapping // Images
				'M1' => 'misc', # not OpenURL mapping // Misc. 1
				'M2' => 'misc', # not OpenURL mapping // Misc. 2
				'M3' => 'id', # used by Ingenta for DOI // Misc. 3
				'M3' => 'ids', # we'll also use as dumping ground for generic ids // Misc. 3
				'N1' => 'notes', # not OpenURL mapping // Notes
				'N2' => 'abstract', // Abstract
				'PB' => 'publisher', // Publisher
				'PY' => 'date', // Publication year (YYYY/MM/DD)
				'RP' => 'reprint', # not OpenURL mapping // Reprint status (IN FILE, NOT IN FILE, ON REQUEST (MM/DD/YY))
				'SN' => 'issn', // ISSN/ISBN (e.g. ISSN XXXX-XXXX)
				'SP' => 'spage', // Start page number
				'T1' => 'atitle', // Primary title
				'T2' => 'btitle', // Title secondary
				'T3' => 'series', // Title series
				'TI' => 'btitle', // Book title
				'TY' => 'reftype', # not OpenURL mapping // Type of reference (must be the first tag)
				'U1' => 'misc', # not OpenURL mapping // User definable 1
				'U2' => 'misc', # not OpenURL mapping // User definable 2
				'U3' => 'misc', # not OpenURL mapping // User definable 3
				'U4' => 'misc', # not OpenURL mapping // User definable 4
				'U5' => 'misc', # not OpenURL mapping // User definable 5
				'UR' => 'id', // Web/URL
				'VL' => 'volume', // Volume number
				'Y1' => 'date', // Primary date
				'Y2' => 'date' // Secondary Date[3]
			);
/*

	[2] http://www.refman.com/support/risformat_tags_02.asp
	[3] http://www.refman.com/support/risformat_tags_03.asp
	[6] http://www.refman.com/support/risformat_tags_06.asp
*/
/*
from: http://en.wikipedia.org/wiki/RIS_%28file_format%29#Tags
28th January 2011

ABST  - Abstract
ADVS  - Audiovisual material
ART   - Art Work
BILL  - Bill/Resolution[1]
BOOK  - Whole book
CASE  - Case
CHAP  - Book chapter
COMP  - Computer program
CONF  - Conference proceeding
CTLG  - Catalog
DATA  - Data file
ELEC  - Electronic Citation
GEN   - Generic
HEAR  - Hearing
ICOMM - Internet Communication
INPR  - In Press
JFULL - Journal (full)
JOUR  - Journal
MAP   - Map
MGZN  - Magazine article
MPCT  - Motion picture
MUSIC - Music score
NEWS  - Newspaper
PAMP  - Pamphlet
PAT   - Patent
PCOMM - Personal communication
RPRT  - Report
SER   - Serial publication
SLIDE - Slide
SOUND - Sound recording
STAT  - Statute
THES  - Thesis/Dissertation
UNBILl  - Unenacted bill/resolution[1]
UNPB  - Unpublished work
VIDEO - Video recording
[1] http://www.refman.com/support/risformat_reftypes.asp
*/

/*
Information re-sorted for convenience

A1  - Primary author
A2  - Secondary author (each name on separate line)
A3  - Author Series (each name on separate line)[2]
AD  - Address
AU  - Author (syntax. Last name, First name, Suffix)
AV  - Availability
BT  - Book Title [X]
CP  - Issue number[6]
CT  - Title of unpublished reference
CY  - City of Publication
ED  - Author Secondary/Editor[3]
EP  - Ending page number
ER  - End of Reference (must be the last tag)
ID  - Reference ID (not imported to reference software)
IS  - Issue number
J1  - Periodical name - User abbreviation 1
J2  - Periodical name - User abbreviation 2
JA  - Periodical in which article was published
JF  - Periodical full name
JO  - Periodical standard abbreviation
KW  - Keywords (each keyword must be on separate line preceded KW -)
L1  - Link to PDF
L2  - Link to Full-text
L3  - Related records
L4  - Images
M1  - Misc. 1
M2  - Misc. 2
M3  - Misc. 3
N1  - Notes 
N2  - Abstract
PB  - Publisher
PY  - Publication year (YYYY/MM/DD)
RP  - Reprint status (IN FILE, NOT IN FILE, ON REQUEST (MM/DD/YY))
SN  - ISSN/ISBN (e.g. ISSN XXXX-XXXX)
SP  - Start page number
T1  - Primary title
T2  - Title secondary
T3  - Title series
TI  - Book title
TY  - Type of reference (must be the first tag)
U1  - User definable 1
U2  - User definable 2
U3  - User definable 3
U4  - User definable 4
U5  - User definable 5
UR  - Web/URL
VL  - Volume number
Y1  - Primary date
Y2  - Secondary Date[3]

[2] http://www.refman.com/support/risformat_tags_02.asp
[3] http://www.refman.com/support/risformat_tags_03.asp
[6] http://www.refman.com/support/risformat_tags_06.asp
[X] from old code
*/		
	# RIS SETTINGS MAPPING SECTION -- FINISH
		
}

/**
 * If you are using a relational-database other than MySQL or Amazon RDS (eg. SQLite, Oracle, etc.) then you need to
 * set your RDBMS-type in the .config-rdbms file. If you are NOT using a relational-database then comment out the
 * next line. Note: MongoDB and other NoSQL databases are NOT relational and do not require the .config-rdbms file
 */
 /* Not needed if only using MongoDB */
// require '.config-rdbms';