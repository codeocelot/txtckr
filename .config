<?php
date_default_timezone_set('EST'); //set to the timezone of your application
session_start(); //if no use for sessions, comment this line out
/**
 * Framework configuration - this object contains your application-specific settings
 */
class config extends configDefaults {
    /**
     * The SITE_NAME and SITE_DOMAIN constants are used in the default templates; you must set this if you will use the
     * default framework functionality such as the "default" layout or the preset email-elements.
     * You can always access these from anywhere in your application via:
     * get::$config->SITE_NAME
     * get::$config->SITE_DOMAIN
     */
    const SITE_NAME = 'txtckr';
    const SITE_DOMAIN = '127.0.0.1';

    /**
     * Database name - create new constants for additional connections (commented out example for DB_SLAVE_NAME follows)
     * Defining DB-name constants is a good practice but not required if you hard-code them in dbConnect() below
     */
    const DB_NAME = 'vork';
    //const DB_SLAVE_NAME = 'slave4readonly';

    /**
     * Most RDBMS users will only need to adjust the connection string in the first $db object. The syntax of this must
     * always match the syntax of the constructor or connect method of your relational-database PHP extension.
     *
     * For the MySQLi extension all arguments are optional and formatted as:
     * self::$db = new $db($host, $username, $passwd, $dbname, $port, $socket);
     *
     * Note: in most setups $host is either "localhost" or set to an IP address
     *       for Amazon RDS it would be something like: myinstance.crwjauxgijdf.us-east-1.rds.amazonaws.com
     *
     * For the syntax of other extensions refer to: http://www.php.net/manual/en/refs.database.vendors.php
     *
     * @param string $modelObject One of the values in self::$modelObjects determining which DB connection to establish
     */
    public function dbConnect($modelObject) {
        $db = (!DEBUG_MODE ? 'db' : 'dbDebug');
        switch ($modelObject) { //a case must exist for each value in self::$modelObjects (additional cases are benign)
            case 'db':
				/* Not needed if only using MongoDB */
                // self::$db = new $db('HOSTNAME', 'USERNAME', 'PASSWORD', self::DB_NAME);
                break;
            case 'mongo':
                if (!class_exists('vorkMongo')) {
                    require self::basepath() . 'sql' . self::DS . 'mongodb';
                }
                $m = new vorkMongo();
                self::$mongo = $m->selectDB(self::DB_NAME);
                //Upsert arg is array in newer MongoDB (leave as-is), Boolean in older- remove comments around (Boolean)
                $this->mongoUpsert = /* (Boolean) */ array('upsert' => true);
                break;
            case 'dbro':
            //if an additional connection is needed, adjust credentials below and follow the instructions in the
            //comment for $modelObjects just after this class.
				/* Not needed if only using MongoDB */
                // self::$dbro = new $db('HOSTNAME', 'USERNAME', 'PASSWORD', self::DB_SLAVE_NAME);
                break;
        }
    }

    /**
     * Using multiple database connections and/or NoSQL like MongoDB or CouchDB
     *
     * If you are only using one DB connection and it is an RDBMS (any databaes except non-relational like Mongo)
     * then you should skip this step.
     *
     * Each database connection (both RDBMS & NoSQL) needs to be defined in the $modelObjects array and have a static
     * propery existing by the same name. "db" exists by default so to add a second read-only connection you set
     * $modelObjects to array('db', 'dbro') and create a new $dbro static property (commented-out examples follow).
     *
     * Use the same process for adding a MongoDB connection in conjuction with an RDBMS (substituting in the last
     * example "mongo" for "dbro"). To use MongoDB as the sole database just overwrite $modelObjects with
     * array('mongo') - this is instead of keeping the default 'db' connection within the array. You will also want to
     * comment out the last line in this file which is RDBMS-specific: require '.config-rdbms';
     *
     * Important: each connection defined here must establish the connection within the dbConnect() method above, an
     * example for both mongo and dbro exists, for other connections just provide a unique name and access from within
     * your models by name: $this->mydbname->query(...);
     *
     * Caution: do NOT uncomment more than one of the following examples; it will trigger a PHP fatal error if you do!
     */
    //Adds MongoDB support in conjunction with other databases
    //public static $modelObjects = array('db', 'mongo'); public static $mongo;

    //Uses MongoDB as the exclusive datasource
    /* We're only using MongoDB */
	public static $modelObjects = array('mongo'); public static $mongo;

    //Adds an additional database connection called "dbro"
    //public static $modelObjects = array('db', 'dbro'); public static $dbro;

    /**
     * If true all self::$modelObjects database connections are made upon loading the first model
     * If false your connections are lazy-loaded when needed but each of your models must extend the model abstract
     * eg.: class wikiModel extends model {...}
     */
    const MODEL_AUTOCONNECT = true;

    /**
     * Enables the caching functions by initializing get::$cache with a cache object (Memcache is default, but
     * can be any object-oriented cache mechanism.)
     */
    public function cache() {
        /* // uncomment this section to enable Memcache caching (Memcache must be installed and enabled in PHP)
        if (!class_exists('memcache')) {
            return false;
        }
        get::$cache = new Memcache;
        //get::$cache->addServer('HOSTNAME', 'PORT')
        //Following is the typical setting for a single-server configuration:
        get::$cache->addServer('localhost', 11211);
        */
    }

    /**
     * Enables special AJAX handling - eg.: AJAX requests will skip the layout file and just return the view contents
     *
     * Can be set globally here and then overridden form within any controller-action or component
     *
     * Valid values:
     * (Boolean) true or false will enable or disable AJAX in all controllers
     * array('controlerName1' => true,
     *       'controlerName2' => 'actionName',
     *       'controlerName3' => array('action1', 'action2'))
     *
     * @var mixed Boolean or an array with controller-name keys & val either true, an action name or an array of actions
     */
    public $ajaxEnabled = true;

    /**
     * Execute a file that is global to the application before the page loads
     * File must be in the root of the mvc directory
     */
    const APP_CONSTRUCT = null;

    /**
     * Execute a file that is global to the application after the page loads
     * File must be in the root of the mvc directory
     */
    const APP_DESTRUCT = null;

    /**
     * Enter your ShareThis publisher code to enable the shareThis tools helper
     */
    //const SHARE_THIS = 'd123456789-1234-1234-1234-a1e123456f';


    /**
     * Enter your AddThis publisher code to enable the addThis tools helper
     */
    //const ADD_THIS = 'xa-1234567890123e';

    /**
     * Enter your Google AdSense client ID to enable use of the adSense tools helper
     */
    //const GOOGLE_AD_CLIENT = '';

    /**
     * Enter your Google Checkout credentials to enable use of the helper
     */
    /*
    public $GOOGLE_CHECKOUT = array('useSandbox' => false,
                                    'live' => array('id' => 'YOURID', 'key' => 'YOURKEY'),
                                    'sandbox' => array('id' => 'YOURID', 'key' => 'YOURKEY'));
    */

    /**
     * Enter your AuthorizeNet credentials to enable use of the chargeAuthNet method of the cc component
     */
    /*
    const AUTHNET_LOGIN = '';
    const AUTHNET_PASSWORD = '';
    */

    /**
     * Meetup API key - enables usage of the Meetup tools-helper
     */
    //const MEETUP_API_KEY = '47e794a9c4766374c761a57833a77';

    /**
     * Enter your UPS account credentials and XML Access Key (refer to ups.com for signup) to enable use of
     * the UPS functions in the shipping component
     *
     * @var array
     */
    //public $UPS = array('xmlAccessKey' => 'YOURKEY000000000', 'userid' => 'YOURID', 'password' => 'YOURPASS');

    /**
     * Enter your Amazon Web Services credentials to enable use of the amazon component
     */
    /*
    public $AMAZON = array('id' => '0000-0000-1234', 'accessKey' => 'AAAABBBBX12345CCDDDD',
                           'secretKey' => 'aA01234560bB01234560cC01234560dD');
    */

    /**
     * Enter your PayPal email to enable use of the PayPal component
     */
    //const PAYPAL_EMAIL = 'you@yourdomain.com';

    /**
     * Convenience function to determine if a user is a "superuser" (someone who gets complete access to
     * all information) and by default only used in the errorhandler view (to determine verbosity) but typical applications
     * find many uses for this
     *
     * Note, if your application uses this method to grant access to private resources then you are highly-recommended
     * to use a stronger authentication method than just checking the IP address (IPs can easily be spoofed.)
     *
     * @return boolean
     */
    public function isSuperuser() {
        return (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] == '127.0.0.1'); // <--change this before use
    }

    /**
     * Set any application-specific constants or properties after this comment.
     * examples:
     * const MY_CONSTANT = 'Hello, Shalom and Bonjour';
     * public $myProperty = array(1, 2, 3);
     *
     * Access them from any MVC element via:
     * get::$config->MY_CONSTANT
     * get::$config->myProperty
     */
    //const EXAMPLE_CONSTANT = 'your data...';
	# SERVICE TYPES SECTION -- START
		const SERVICES = Array
			(
				[00]		=>	"fulltext",
				[01]		=>	"holdings";
				[02]		=>	"request",
				[03]		=>	"citation",
				[04]		=>	"abstract",
				[05]		=>	"reference",
				[06]		=>	"information",
				[07]		=>	"indexing",
				[08]		=>	"ranking"
			);
	# SERVICE TYPES SECTION -- FINISH
	
	# DEFAULT CURL OPTIONS -- START	
		const CURLOPTS = Array 
			(
			'CURLOPT_HEADER' => 0;
			'CURLOPT_RETURNTRANSFER' =>  1,
			'CURLOPT_FOLLOWLOCATION' =>  1,
			'CURLOPT_USERAGENT' => 'Mozilla/4.0',
			'CURLOPT_TIMEOUT' =>  '20',
			'CURLOPT_FAILONERROR' =>  1
			)
	# DEFAULT CURL OPTIONS -- FINISH
	
	# DATASOURCES SECTION -- START
	
		public $isbnDataSources = Array
			(
				"oclc.json" => "http://xisbn.worldcat.org/webservices/xid/isbn/_ISBN_?method=getEditions&format=json&fl=*",
				"isbndb.xml" => "http://isbndb.com/api/books.xml?access_key=HLLBUYGA&index1=isbn&value1=_ISBN_",
				"google.json" => "http://books.google.com/books?jscmd=viewapi&bibkeys=ISBN_ISBN_",
				"openlibrary.json" => "http://openlibrary.org/api/books?bibkeys=ISBN:_ISBN_",
				"thingISBN.xml" => "http://www.librarything.com/api/thingISBN/_ISBN_&allids=1"
			);

		public $issnDataSources = Array
			(
				"oclc.json" => "http://xissn.worldcat.org/webservices/xid/issn/_ISSN_?method=getEditions&format=json&fl=*"
			);
			
		public $doiDataSources = Array
			{
				"pubmed.xml" => "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&retmax=0&usehistory=y&term=_DOI_",
				"crossref.json" => "http://www.crossref.org/openurl/?id=doi:_DOI_&noredirect=true&pid=API_KEY&format=unixref",
				"nature.json" => "http://nurture.nature.com/cgi-bin/opensearch?db=crossref&out=json&q=_DOI_"
			}
	
		public $onixForms = Array
			(   
				'AA' => 'Audio',
				'BA' => 'Book',
				'BB' => 'Hardcover',
				'BC' => 'Paperback',
				'DA' => 'Digital',
				'FA' => 'Film or transparency',
				'MA' => 'Microform',
				'VA' => 'Video',
				'JB' => 'Printed serial',
				'JC' => 'Electronic Serial',
				'JD' => 'Online Serial',
				'MA' => 'Microform'
			);
	# DATASOURCES SECTION -- FINISH		
	
	# REFERENCE TYPES SECTION -- START		
			$refTypes['key']['article'] = 'article';
			$refTypes['reftype']['article'] = 'JOUR';
			$refTypes['reqtype']['article'] = 'Journal Article';
			$refTypes['sourcetype']['article'] = 'Journal';
			$refTypes['notes']['article'] = '';
		// book: a publication that is complete in one part or a designated finite number of parts, often identified with an ISBN.
			$refTypes['key']['book'] = 'book';
			$refTypes['reftype']['book'] = 'BOOK';
			$refTypes['reqtype']['book'] = 'Book';
			$refTypes['sourcetype']['book'] = 'Book';
			$refTypes['notes']['book'] = '';
		// bookitem: a defined section of a book, usually with a separate title or number.
			$refTypes['key']['bookitem'] = 'bookitem';
			$refTypes['reftype']['bookitem'] = 'CHAP';
			$refTypes['reqtype']['bookitem'] = 'Book Section';
			$refTypes['sourcetype']['bookitem'] = 'Book';
			$refTypes['notes']['bookitem'] = '';
		// conference: a record of a conference that includes one or more conference papers and that is published as an issue of a journal or serial publication 
			$refTypes['key']['conference'] = 'conference';
			$refTypes['reftype']['conference'] = 'JFULL';
			$refTypes['reqtype']['conference'] = 'Conference Item';
			$refTypes['sourcetype']['conference'] = 'Conference';
			$refTypes['notes']['conference'] = 'This was identified as a "collection of conference presentations published as an issue of a serial publication" in the OpenURL metadata.';
		// thesis or dissertation
			$refTypes['key']['dissertation'] = 'dissertation';
			$refTypes['reftype']['dissertation'] = 'THES';
			$refTypes['reqtype']['dissertation'] = 'Dissertation';
			$refTypes['sourcetype']['dissertation'] = 'Thesis/Dissertation';
			$refTypes['notes']['dissertation'] = '';
		// document: general document type to be used when available data elements do not allow determination of a more specific document type, i.e. when one has only author and title but no publication information. 
			$refTypes['key']['document'] = 'document';	
			$refTypes['reftype']['document'] = 'GEN';
			$refTypes['reqtype']['document'] = 'Unknown';
			$refTypes['sourcetype']['document'] = 'Unknown';
			$refTypes['notes']['document'] = 'This was identified as a "general document type" in the OpenURL metadata.';
		// issue: one instance of the serial publication
			$refTypes['key']['issue'] = 'issue';
			$refTypes['reftype']['issue'] = 'JFULL';
			$refTypes['reqtype']['issue'] = 'Journal/Serial Issue';
			$refTypes['sourcetype']['issue'] = 'Journal';
			$refTypes['notes']['issue'] = 'This was identified as a "single issue of a serial publication" in the OpenURL metadata.';
		// journal: a serial publication issued in successive parts
			$refTypes['key']['journal'] = 'journal';
			$refTypes['reftype']['journal'] = 'JFULL';
			$refTypes['reqtype']['journal'] = 'Journal/Serial Publication';
			$refTypes['sourcetype']['journal'] = 'Journal';
			$refTypes['notes']['journal'] = 'This was identified as a "serial publication" in the OpenURL metadata.';
		// patent
			$refTypes['key']['patent'] = 'patent';
			$refTypes['reftype']['patent'] = 'PAT';
			$refTypes['reqtype']['patent'] = 'Patent';
			$refTypes['sourcetype']['patent'] = 'Patent';
			$refTypes['notes']['patent'] = '';
		// proceeding: a single conference presentation published in a journal or serial publication 
			$refTypes['key']['proceeding'] = 'proceeding';
			$refTypes['reftype']['proceeding'] = 'CONF';
			$refTypes['reqtype']['proceeding'] = 'Conference Proceedings';
			$refTypes['sourcetype']['proceeding'] = 'Conference';
			$refTypes['notes']['proceeding'] = 'This was identified as a "single conference presentation in a serial publication" in the OpenURL metadata.';
		// preprint: an individual paper or report published in paper or electronically prior to its publication in a journal or serial.
			$refTypes['key']['preprint'] = 'report';
			$refTypes['reftype']['preprint'] = 'JOUR';
			$refTypes['reqtype']['preprint'] = 'Journal Article Preprint';
			$refTypes['sourcetype']['preprint'] = 'Journal';
			$refTypes['notes']['preprint'] = 'This was identified as an "individual paper or report published in paper or electronically prior to its publication" in a journal or serial in the OpenURL metadata.';
		// report: report or technical report is a published document that is issued by an organization, agency or government body
			$refTypes['key']['report']= 'report';
			$refTypes['reftype']['report'] = 'RPRT';
			$refTypes['reqtype']['report'] = 'Report';
			$refTypes['sourcetype']['report'] = 'Report';
			$refTypes['notes']['report'] = '';
		// unknown, but at least it's known that it's unknown!
			$refTypes['key']['unknown'] = 'unknown';
			$refTypes['reftype']['unknown'] = 'GEN';
			$refTypes['reqtype']['unknown'] = 'Unknown';
			$refTypes['sourcetype']['unknown'] = 'Unknown';
			$refTypes['notes']['unknown'] = 'This was identified as an "unknown format" in the OpenURL metadata.';
	# REFERENCE TYPES SECTION -- FINISH	

	# NAMES SECTION -- START		
		public $namePrefixes = Array 
			(
				[00] => '/_van_den_/i', // van den = Dutch
				[01] => '/_van_der_/i', // van der = Dutch
				[02] => '/_van_de_/i', // van de = Dutch
				[03] => '/_van_/i', // van = Dutch
				[04] => '/_von_/i', // von = German
				[05] => '/_dela_/i', // dela = French/Italian?
				[06] => '/_de_la_/i', // de la = French
				[07] => '/_de_/i', // de = Dutch/French?
				[08] => '/_des_/i', // des = French
				[09] => '/_di_/i', // di = Italian
				[10] => '/_du_/i', // du = French
				[11] => '/_af_/i', // af = Swedish
				[12] => '/_bin_/i', // bin = Arabic
				[13] => '/_ben_/i', // ben = Hebrew
				[14] => '/_ibn_/i', // ibn = Arabic
				[15] => '/_uyt_den_/i', // uyt den = Dutch
				[16] => '/_uyt_der_/i', // uyt der = Dutch
				[17] => '/_ten_/i', // ten = Dutch
				[18] => '/_ter_/i', // ter = Dutch
				[19] => '/_het_/i', // het = Dutch?
				[20] => '/_ab_/i', // ab = Welsh
				[21] => '/_ap_/i', // ap = Welsh
				[22] => '/_st\._/i' // st. = English/French?
			};
			
		public $nameOthers = Array
			(
				[00] => '/^Van$/D', // Van = "West, Van", "Morrison, Van", or "Van Lustbader, Eric"?
				[01] => '/^Ben$/D' // Ben = "Ben Carey, Donald" or "Carey, Ben"?
			);
			
		public $nameTitles = Array
			(
				[00] => '/_jr[\.,]_/i', // Jr. = American
				[01] => '/_sr[\.,]_/i', // Sr. = American
				[02] => '/_[ivx]+_/i', // IV, III = English/American
				[03] => '/_ph\.?d_/i', // Doctor
				[04] => '/_m\.?d_/i', // Masters
				[05] => '/_esq[\.,]_/i', // Esquire
				[06] => '/_esquire_/i', // Esquire
				[07] => '/_judge_/i' // Esquire
			);
			
		public $nameSegments = Array
			(
				[1]	=> 'first_name',
				[2]	=> 'second_name',
				[3]	=> 'third_name'
			);
			
		public $nameInitials = Array
			(
				[1]	=> 'first_initial',
				[2]	=> 'second_initial',
				[3]	=> 'third_initial'
			);
	# NAMES SECTION -- FINISH

		
			
	# OPENURL SETTINGS MAPPING SECTION -- START
			// translate between OpenURL keys and English lowercase names (spaces substituted for underscores)
			// some of these aren't translations, they're placeholders so they're not forgotten!
		public $openurlLabels;
			$openurlLabels['advisor'] = 'Thesis Advisor';
			$openurlLabels['applcc'] = 'Application Country';
			$openurlLabels['appldate'] = 'Application Date';
			$openurlLabels['applnumber'] = 'Application Number';
			$openurlLabels['applyear'] = 'Application Year';
			$openurlLabels['artnum'] = 'Article Number';
			$openurlLabels['assignee'] = 'Patent Assignee';
			$openurlLabels['atitle'] = 'Item Title';
			$openurlLabels['au'] = 'Author\'s name';
			$openurlLabels['aucorp'] = 'Corporate Author';
			$openurlLabels['aufirst'] = 'Author\'s first name';
			$openurlLabels['aufull'] = 'Author\'s name';
			$openurlLabels['auinit'] = 'Author\'s initials';
			$openurlLabels['auinit1'] = 'Author\'s first initial';
			$openurlLabels['auinitm'] = 'Author\'s middle initial(s)';
			$openurlLabels['aulast'] = 'Author\'s last name';
			$openurlLabels['btitle'] = 'Book Title';
			$openurlLabels['cc'] = 'Country Code';
			$openurlLabels['co'] = 'Country Name';
			$openurlLabels['coden'] = 'CODEN';
			$openurlLabels['contributor'] = 'Contributor';
			$openurlLabels['coverage'] = 'Coverage';
			$openurlLabels['creator'] = 'Creator';
			$openurlLabels['degree'] = 'Type of thesis';
			$openurlLabels['description'] = 'Description';
			$openurlLabels['ed'] = 'Editor\'s name';
			$openurlLabels['edfirst'] = 'Editor\'s first name';
			$openurlLabels['edfull'] = 'Editor\'s name';
			$openurlLabels['edinit'] = 'Editor\'s initial(s)';
			$openurlLabels['edition'] = 'Edition';
			$openurlLabels['edlast'] = 'Editor\'s last name';
			$openurlLabels['eissn'] = 'eISSN';
			$openurlLabels['epage'] = 'Last page';
			$openurlLabels['genre'] = 'Genre';
			$openurlLabels['inst'] = 'Instution';
			$openurlLabels['inv'] = 'Inventor\'s name';
			$openurlLabels['invfirst'] = 'Inventor\'s first name';
			$openurlLabels['invfull'] = 'Inventor\'s name';
			$openurlLabels['invinit'] = 'Inventor\'s initial(s)';
			$openurlLabels['invlast'] = 'Inventor\'s last name';
			$openurlLabels['isbn'] = 'ISBN';
			$openurlLabels['issn'] = 'ISSN';
			$openurlLabels['issue'] = 'Issue';
			$openurlLabels['jtitle'] = 'Journal Title';
			$openurlLabels['kind'] = 'Type of Patent';
			$openurlLabels['pages'] = 'Pages';
			$openurlLabels['pub'] = 'Publisher';
			$openurlLabels['pubdate'] = 'Published';
			$openurlLabels['publisher'] = 'Publisher';
			$openurlLabels['quarter'] = 'Quarter';
			$openurlLabels['series'] = 'Series title';
			$openurlLabels['sid'] = 'Referer Id';
			$openurlLabels['spage'] = 'First page';
			$openurlLabels['ssn'] = 'Season';
			$openurlLabels['stitle'] = 'Abbreviated title';
			$openurlLabels['subject'] = 'Subject';
			$openurlLabels['title'] = 'Title';
			$openurlLabels['tpages'] = 'Number of pages';
			$openurlLabels['type'] = 'Type';
	# OPENURL SETTINGS MAPPING SECTION -- FINISH
	
	# RIS SETTINGS MAPPING TO OPENURL SECTION -- START
	
		public $RIS;
			$RIS['key']['A1'] = 'au'; // Primary author
			$RIS['key']['A2'] = 'au'; // Secondary author (each name on separate line)
			$RIS['key']['A3'] = 'au'; // Author Series (each name on separate line)[2]
			$RIS['key']['AD'] = 'address'; # not OpenURL mapping // Address
			$RIS['key']['AU'] = 'au'; //Author (syntax. Last name, First name, Suffix)
			$RIS['key']['AV'] = 'availability'; # not supported // Availability
			$RIS['key']['CP'] = 'issue'; // Issue number[6]
			$RIS['key']['EP'] = 'ed'; // Author Secondary/Editor[3]
			$RIS['key']['EP'] = 'epage'; // Ending page number
			$RIS['key']['ER'] = 'null'; // End of Reference (must be the last tag)
			$RIS['key']['ID'] = 'id'; // Reference ID (not imported to reference software)
			$RIS['key']['IS'] = 'issue'; // Issue number
			$RIS['key']['J1'] = 'stitle'; // Periodical name - User abbreviation 1
			$RIS['key']['J2'] = 'stitle'; // Periodical name - User abbreviation 2
			$RIS['key']['JA'] = 'jtitle'; // Periodical in which article was published			
			$RIS['key']['JF'] = 'jtitle'; // Periodical full name
			$RIS['key']['JO'] = 'stitle'; // Periodical standard abbreviation
			$RIS['key']['KW'] = 'subject'; // Keywords (each keyword must be on separate line preceded KW -)
			$RIS['key']['L1'] = 'pdf';  # not OpenURL mapping // Link to PDF
			$RIS['key']['L2'] = 'fulltext'; # not OpenURL mapping // Link to Full-text
			$RIS['key']['L3'] = 'id'; // Related records
			$RIS['key']['L4'] = 'images'; # not OpenURL mapping // Images
			$RIS['key']['M1'] = 'misc'; # not OpenURL mapping // Misc. 1
			$RIS['key']['M2'] = 'misc'; # not OpenURL mapping // Misc. 2
			$RIS['key']['M3'] = 'id'; # used by Ingenta for DOI // Misc. 3
			$RIS['key']['N1'] = 'notes'; # not OpenURL mapping // Notes
			$RIS['key']['N2'] = 'abstract'; // Abstract
			$RIS['key']['PB'] = 'publisher'; // Publisher
			$RIS['key']['PY'] = 'date'; // Publication year (YYYY/MM/DD)
			$RIS['key']['RP'] = 'reprint'; # not OpenURL mapping // Reprint status (IN FILE, NOT IN FILE, ON REQUEST (MM/DD/YY))
			$RIS['key']['SN'] = 'issn'; // ISSN/ISBN (e.g. ISSN XXXX-XXXX)
			$RIS['key']['SP'] = 'spage'; // Start page number
			$RIS['key']['T1'] = 'atitle'; // Primary title
			$RIS['key']['T2'] = 'btitle'; // Title secondary
			$RIS['key']['T3'] = 'series'; // Title series
			$RIS['key']['TI'] = 'btitle'; // Book title
			$RIS['key']['TY'] = 'reftype'; # not OpenURL mapping // Type of reference (must be the first tag)
			$RIS['key']['U1'] = 'misc'; # not OpenURL mapping // User definable 1
			$RIS['key']['U2'] = 'misc'; # not OpenURL mapping // User definable 2
			$RIS['key']['U3'] = 'misc'; # not OpenURL mapping // User definable 3
			$RIS['key']['U4'] = 'misc'; # not OpenURL mapping // User definable 4
			$RIS['key']['U5'] = 'misc'; # not OpenURL mapping // User definable 5
			$RIS['key']['UR'] = 'id'; // Web/URL
			$RIS['key']['VL'] = 'volume'; // Volume number
			$RIS['key']['Y1'] = 'date'; // Primary date
			$RIS['key']['Y2'] = 'date'; // Secondary Date[3]
/*

	[2] http://www.refman.com/support/risformat_tags_02.asp
	[3] http://www.refman.com/support/risformat_tags_03.asp
	[6] http://www.refman.com/support/risformat_tags_06.asp
*/
/*
from: http://en.wikipedia.org/wiki/RIS_%28file_format%29#Tags
28th January 2011

ABST  - Abstract
ADVS  - Audiovisual material
ART   - Art Work
BILL  - Bill/Resolution[1]
BOOK  - Whole book
CASE  - Case
CHAP  - Book chapter
COMP  - Computer program
CONF  - Conference proceeding
CTLG  - Catalog
DATA  - Data file
ELEC  - Electronic Citation
GEN   - Generic
HEAR  - Hearing
ICOMM - Internet Communication
INPR  - In Press
JFULL - Journal (full)
JOUR  - Journal
MAP   - Map
MGZN  - Magazine article
MPCT  - Motion picture
MUSIC - Music score
NEWS  - Newspaper
PAMP  - Pamphlet
PAT   - Patent
PCOMM - Personal communication
RPRT  - Report
SER   - Serial publication
SLIDE - Slide
SOUND - Sound recording
STAT  - Statute
THES  - Thesis/Dissertation
UNBILl  - Unenacted bill/resolution[1]
UNPB  - Unpublished work
VIDEO - Video recording
[1] http://www.refman.com/support/risformat_reftypes.asp
*/

/*
Information re-sorted for convenience

A1  - Primary author
A2  - Secondary author (each name on separate line)
A3  - Author Series (each name on separate line)[2]
AD  - Address
AU  - Author (syntax. Last name, First name, Suffix)
AV  - Availability
CP  - Issue number[6]
CT  - Title of unpublished reference
CY  - City of Publication
ED  - Author Secondary/Editor[3]
EP  - Ending page number
ER  - End of Reference (must be the last tag)
ID  - Reference ID (not imported to reference software)
IS  - Issue number
J1  - Periodical name - User abbreviation 1
J2  - Periodical name - User abbreviation 2
JA  - Periodical in which article was published
JF  - Periodical full name
JO  - Periodical standard abbreviation
KW  - Keywords (each keyword must be on separate line preceded KW -)
L1  - Link to PDF
L2  - Link to Full-text
L3  - Related records
L4  - Images
M1  - Misc. 1
M2  - Misc. 2
M3  - Misc. 3
N1  - Notes 
N2  - Abstract
PB  - Publisher
PY  - Publication year (YYYY/MM/DD)
RP  - Reprint status (IN FILE, NOT IN FILE, ON REQUEST (MM/DD/YY))
SN  - ISSN/ISBN (e.g. ISSN XXXX-XXXX)
SP  - Start page number
T1  - Primary title
T2  - Title secondary
T3  - Title series
TI  - Book title
TY  - Type of reference (must be the first tag)
U1  - User definable 1
U2  - User definable 2
U3  - User definable 3
U4  - User definable 4
U5  - User definable 5
UR  - Web/URL
VL  - Volume number
Y1  - Primary date
Y2  - Secondary Date[3]

[2] http://www.refman.com/support/risformat_tags_02.asp
[3] http://www.refman.com/support/risformat_tags_03.asp
[6] http://www.refman.com/support/risformat_tags_06.asp
*/		
	# RIS SETTINGS MAPPING SECTION -- FINISH
		
}

/**
 * If you are using a relational-database other than MySQL or Amazon RDS (eg. SQLite, Oracle, etc.) then you need to
 * set your RDBMS-type in the .config-rdbms file. If you are NOT using a relational-database then comment out the
 * next line. Note: MongoDB and other NoSQL databases are NOT relational and do not require the .config-rdbms file
 */
 /* Not needed if only using MongoDB */
// require '.config-rdbms';