<?php

class crossrefXMLHelper($netSource) {

            $this->['result']		= $netSource['result'];
            $this->['errorState']	= $netSource['errorState'];
			$this->['errorCode']	= $netSource['errorCode'];

	if (preg_match('/<query status="unresolved" fl_count="0">/', $netSource['result'])){
		$this->['CRurl_status'] = "Null. No results from CrossRef query";
		echo "<!-- Null. No results from CrossRef query -->\n";
		$this->['error'] = "CrossRef query failed - unable to retrieve article details to determine access!";
		$this->['error_detail'] = "CrossRef said: unresolved";
		return($this->);
	} elseif (preg_match('/DOI not found in CrossRef/', $netSource['result'])){
		$this->['CRurl_status'] = "Null. No results from CrossRef query";
		echo "<!-- Null. No results from CrossRef query -->\n";
		$this->['error'] = "CrossRef query failed - unable to retrieve article details to determine access!";
		$this->['error_detail'] = "CrossRef said: DOI not found - perhaps the publisher is not a member of CrossRef?";
		return($this->);
	} elseif ($netSource['errorCode'] != "200"){
		$this->['CRurl_status'] = "Error. No results from CrossRef query";
		echo "<!-- Error. No results from CrossRef query -->\n";
		$this->['error'] = "CrossRef query failed - unable to retrieve article details to determine access!";
		$this->['error_detail'] = "CrossRef was unreachable!";
		return($this->);
	} else {
		# update/insert MongoDB entry
	}
			
	// echo $cr_xml;
	if (preg_match('/book/', $netSource['result'])){
	echo "<!-- CrossRef data: book -->\n";
	$crB_xml = simplexml_load_string($netSource['result']);
	foreach ($crB_xml->doi_record->crossref->book as $book){
	# PARSE BOOK METADATA : START
		foreach ($book->book_metadata as $book_metadata){
		$this->['reftype'] = "BOOK";
		foreach ($book_metadata->contributors->person_name as $person_name){
		$autype = $person_name['contributor_role'];
		if ($person_name['sequence'] == "first"){
		switch ($autype){
			case "editor":
				$this->['edlast'] = "" . $person_name->surname;
				$this->['edfirst'] = "" . $person_name->given_name;
				break;
			case "author":
				$this->['aulast'] = "" . $person_name->surname;
				$this->['aufirst'] = "" . $person_name->given_name;
				break;
			}
		} else {
		switch ($autype){
			case "editor":
			$edlast = "edlast" . $i;
			$edfirst = "edfirst" . $i;
				$this->[$edlast] = "" . $person_name->surname;
				$this->[$edfirst] = "" . $person_name->given_name;
				break;
			case "author":
			$aulast = "aulast" . $i;
			$aufirst = "aufirst" . $i;
				$this->[$aulast] = "" . $person_name->surname;
				$this->[$aufirst] = "" . $person_name->given_name;
				break;
			}
		$i++;
		 }
		}
		$this->['series'] = "" . $book_metadata->series_metadata->titles->title;
		$this->['title'] = "" . $book_metadata->titles->title;
		$this->['volume'] = "" . $book_metadata->volume;
		$this->['year'] = "" . $book_metadata->publication_date->year;
		$this->['artyear'] = "" . $book_metadata->publication_date->year;
		$this->['dateisyear'] = "true";
		$this->['publisher'] = "" . $book_metadata->publisher->publisher_name;
		$this->['city'] = "" . $book_metadata->publisher->publisher_place;
		$this->['PB'] = "" . $book_metadata->publisher->publisher_name;
		$this->['CY'] = "" . $book_metadata->publisher->publisher_place;
		$this->['isbn'] = "" . preg_replace  ('/[-\s]/', '', $book_metadata->isbn);
		$this->['SN'] = "" . preg_replace  ('/[-\s]/', '', $book_metadata->isbn);
		$this->['N1'] .= "ISBN (" . $book_metadata->isbn['media_type'] ."): " . $book_metadata->isbn ."\n";
		$this->['CRdoi'] = "" . $book_metadata->doi_data->doi;
		$this->['N1'] .= "http://dx.doi.org/" . $book_metadata->doi_data->doi ." [Book DOI Link]\n";
		$this->['N1'] .= "" . $book_metadata->doi_data->resource ." [Book URL]\n";
		$this->['N1'] .= "Language: " . mb_convert_case($book_metadata['language'], MB_CASE_UPPER, "UTF-8") ." (EN = English)\n";
		}
	# PARSE BOOK METADATA : FINISH
	# PARSE CHAPTER/CONTENT METADATA : START
	if (preg_match('/content_item/', $netSource['result'])){
		foreach ($book->content_item as $content_item){
		$this->['reftype'] = "CHAP";
		foreach ($content_item->contributors->person_name as $person_name){
		$autype = $person_name['contributor_role'];
		if ($person_name['sequence'] == "first"){
		switch ($autype){
			case "editor":
				$this->['edlast'] = "" . $person_name->surname;
				$this->['edfirst'] = "" . $person_name->given_name;
				break;
			case "author":
				$this->['aulast'] = "" . $person_name->surname;
				$this->['aufirst'] = "" . $person_name->given_name;
				break;
			}
		} else {
		switch ($autype){
			case "editor":
			$edlast = "edlast" . $i;
			$edfirst = "edfirst" . $i;
				$this->[$edlast] = "" . $person_name->surname;
				$this->[$edfirst] = "" . $person_name->given_name;
				break;
			case "author":
			$aulast = "aulast" . $i;
			$aufirst = "aufirst" . $i;
				$this->[$aulast] = "" . $person_name->surname;
				$this->[$aufirst] = "" . $person_name->given_name;
				break;
			}
		$i++;
		 }
		}
		$this->['atitle'] = "" . $content_item->titles->title;
		$this->['N1'] .= "" . $content_item->component_number ."\n";
		$this->['spage'] = "" . $content_item->pages->first_page;
		$this->['epage'] = "" . $content_item->pages->last_page;
		$this->['CRdoi'] = "" . $content_item->doi_data->doi;
		$this->['id'] = "doi:" . $content_item->doi_data->doi;
		$this->['idLink'] = "" . $content_item->doi_data->resource;
		}
	# PARSE CHAPTER/CONTENT METADATA :  FINISH
	  }
	 }
	}

	if (preg_match('/journal_metadata/', $netSource['result'])){
	echo "<!-- CrossRef data: journal -->\n";
	$crJ_xml = simplexml_load_string($netSource['result']);
	foreach ($crJ_xml->doi_record->crossref->journal as $journal){
		$this->['reftype'] = "JOUR";
	# PARSE JOURNAL METADATA : START
		foreach ($journal->journal_metadata as $journal_metadata){
		$this->['title'] = "" . $journal_metadata->full_title;
		$this->['abbrev_title'] = "" . $journal_metadata->abbrev_title;
		$this->['issn'] = "" . $journal_metadata->issn;
		$this->['N1'] .= "ISSN (" . $journal_metadata->issn['media_type'] ."): " . $journal_metadata->issn ."\n";
		$this->['coden'] = "" . $journal_metadata->coden;
		}
	# PARSE  JOURNAL METADATA : FINISH
	# PARSE ISSUE METADATA : START
		foreach ($journal->journal_issue as $journal_issue){
		$this->['artyear'] = "" . $journal_issue->publication_date->year;
		$this->['dateisyear'] = "true";
		$this->['year'] = "" . $journal_issue->publication_date->year;
		$this->['month'] = "" . $journal_issue->publication_date->month;
		$this->['day'] = "" . $journal_issue->publication_date->day;
		$this->['volume'] = "" . $journal_issue->journal_volume->volume;
		$this->['issue'] = "" . $journal_issue->issue;
		}
	# PARSE  ISSUE METADATA : FINISH
	if (preg_match('/journal_article/', $netSource['result'])){
	# PARSE ARTICLE METADATA : START
		foreach ($journal->journal_article as $journal_article){
		foreach ($journal_article->contributors->person_name as $person_name){
		$autype = $person_name['contributor_role'];
		if ($person_name['sequence'] == "first"){
		switch ($autype){
			case "editor":
				$this->['edlast'] = "" . $person_name->surname;
				$this->['edfirst'] = "" . $person_name->given_name;
				break;
			case "author":
				$this->['aulast'] = "" . $person_name->surname;
				$this->['aufirst'] = "" . $person_name->given_name;
				break;
			}
		} else {
		switch ($autype){
			case "editor":
			$edlast = "edlast" . $i;
			$edfirst = "edfirst" . $i;
				$this->[$edlast] = "" . $person_name->surname;
				$this->[$edfirst] = "" . $person_name->given_name;
				break;
			case "author":
			$aulast = "aulast" . $i;
			$aufirst = "aufirst" . $i;
				$this->[$aulast] = "" . $person_name->surname;
				$this->[$aufirst] = "" . $person_name->given_name;
				break;
			}
		$i++;
		 }
		}
		$this->['atitle'] = "" . $journal_article->titles->title;
		$this->['N1'] .= "Article type: " . $journal_article['publication_type'] ."\n";
		$this->['spage'] = "" . $journal_article->pages->first_page;
		$this->['epage'] = "" . $journal_article->pages->last_page;
		$this->['CRdoi'] = "" . $journal_article->doi_data->doi;
		$this->['N1'] .= "Available online since: " . $journal_article->doi_data->timestamp ."\n";
		$this->['timestamp'] = $journal_article->doi_data->timestamp;
		if ($journal_article->publication_date['media_type'] == "online"){
		$this->['N1'] .= "Published online: " . $journal_article->publication_date->year . "-" . $journal_article->publication_date->month . "-" . $journal_article->publication_date->day . "\n";
		$this->['artyear'] = "" . $journal_article->publication_date->year;
		$this->['dateisyear'] = "true";
		}
		$this->['id'] = "doi:" . $journal_article->doi_data->doi;
		$this->['idLink'] = "" . $journal_article->doi_data->resource;
		}
	# PARSE ARTICLE METADATA :  FINISH
	  }
	 }
	}
}